{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled6.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "nbRrlNhLGlYU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "outputId": "efaba26a-1627-4c72-9da9-99344d560496"
      },
      "source": [
        "# Create the below pattern using nested for loop in Python.\n",
        "\n",
        "print(\"Program to print half pyramid: \");\n",
        "rows = input(\"Enter number of rows \")\n",
        "rows = int (rows)\n",
        "\n",
        "for i in range (0, rows):\n",
        "    for j in range(0, i + 1):\n",
        "        print(\"*\", end='')\n",
        "    print(\"\\r\")\n",
        "for k in range(5,0,-1):\n",
        "  for l in range(k-1,0,-1):\n",
        "    print(\"*\",end=\"\")\n",
        "  print(\"\\r\")  \n"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Program to print half pyramid: \n",
            "Enter number of rows 5\n",
            "*\n",
            "**\n",
            "***\n",
            "****\n",
            "*****\n",
            "****\n",
            "***\n",
            "**\n",
            "*\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YZ-r8j9CN_Oh",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TMgcdlwDObG5",
        "colab_type": "text"
      },
      "source": [
        "Write a Python program to reverse a word after accepting the input from the user.\n",
        "Sample Output:\n",
        "Input word: AcadGild\n",
        "Output: dilGdacA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RqsagpgaOBeV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "43953702-c676-48b3-ec2c-bdb1f39b4a93"
      },
      "source": [
        "print(\"Program to print Reverse a String: \");\n",
        "rows = input(\"Enter the Word to Reverse \")\n",
        "print(\"Word Entered is {}\".format(rows))\n",
        "a=rows[::-1]\n",
        "print(\"Reverse word is {}\".format(a))"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Program to print Reverse a String: \n",
            "Enter the Word to Reverse AcadGild\n",
            "Word Entered is AcadGild\n",
            "Reverse word is dliGdacA\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MLZpdWuDQMWw",
        "colab_type": "text"
      },
      "source": [
        "Write a Python Program to print the given string in the format specified in the sample output.\n",
        "WE, THE PEOPLE OF INDIA, having solemnly resolved to constitute India into a\n",
        "SOVEREIGN, SOCIALIST, SECULAR, DEMOCRATIC REPUBLIC and to secure to all\n",
        "its citizens\n",
        "Sample Output:\n",
        "WE, THE PEOPLE OF INDIA,\n",
        "having solemnly resolved to constitute India into a SOVEREIGN, !\n",
        "SOCIALIST, SECULAR, DEMOCRATIC REPUBLIC\n",
        "and to secure to all its citizens\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6fiK_HPGQOGR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "34e71e4a-1c7f-4582-9f89-a0e254ff7a85"
      },
      "source": [
        "string = \"WE, THE PEOPLE OF INDIA,{}having solemnly resolved to constitute India into a SOVEREIGN,{}SOCIALIST, SECULAR, DEMOCRATIC REPUBLIC{}and to secure to all its citizens{}\"\n",
        "print(string.format('\\n\\t','!\\n\\t\\t','\\n\\t\\t',':'))"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WE, THE PEOPLE OF INDIA,\n",
            "\thaving solemnly resolved to constitute India into a SOVEREIGN,!\n",
            "\t\tSOCIALIST, SECULAR, DEMOCRATIC REPUBLIC\n",
            "\t\tand to secure to all its citizens:\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6uJDSXsnRKf6",
        "colab_type": "text"
      },
      "source": [
        "Write a Python program to find the volume of a sphere with diameter 12 cm.\n",
        "Formula: V=4/3 * Ï€ * r\n",
        "3"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dwbkhq9nRrRK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "8b880d62-76ae-4545-f8ed-ce8c32bce930"
      },
      "source": [
        "PI = 3.14\n",
        "diameter = 12\n",
        "radius = diameter/2\n",
        "Volume = (4/3) * PI * radius ** 3\n",
        "print(\"The Volume of the Sphere is %.2f\" %Volume)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The Volume of the Sphere is 904.32\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MGYna6z_Rse-",
        "colab_type": "text"
      },
      "source": [
        "Write a Python program to accept the user's first and last name and then getting them printed in\n",
        "the the reverse order with a space between first name and last name"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QJUQ_WpURwFu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "outputId": "077f4015-0321-49ab-da98-efaa5deb65fe"
      },
      "source": [
        "print(\"Program to print Name in Reverse Order: \");\n",
        "FirstName = input(\"Enter First Name \")\n",
        "print(\"FirstName Entered is {}\".format(FirstName))\n",
        "LastName = input(\"Enter Last Name \")\n",
        "print(\"LastName Entered is {}\".format(LastName))\n",
        "fullname= LastName +' '+ FirstName\n",
        "print(\"FullName is {}\".format(fullname))\n",
        "ReverseName=fullname[::-1]\n",
        "print(\"ReverseName is {}\".format(ReverseName))"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Program to print Name in Reverse Order: \n",
            "Enter First Name Vyom\n",
            "FirstName Entered is Vyom\n",
            "Enter Last Name Rastogi\n",
            "LastName Entered is Rastogi\n",
            "FullName is Rastogi Vyom\n",
            "ReverseName is moyV igotsaR\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AJNYbKj1V5y3",
        "colab_type": "text"
      },
      "source": [
        "Write a program which will find all such numbers which are divisible by 7 but are not a multiple\n",
        "of 5, between 2000 and 3200 (both included). The numbers obtained should be printed in a\n",
        "comma-separated sequence on a single line."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AsM5gTBUV4c4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "e30d2caf-18c2-4dda-a8ef-69bda465eda0"
      },
      "source": [
        "X=[]\n",
        "for i in range(2000,3201,1):\n",
        "  if (i%7 ==0 and i%5 !=0 ):\n",
        "    X.append(str(i))\n",
        "print(','.join(X))"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2002,2009,2016,2023,2037,2044,2051,2058,2072,2079,2086,2093,2107,2114,2121,2128,2142,2149,2156,2163,2177,2184,2191,2198,2212,2219,2226,2233,2247,2254,2261,2268,2282,2289,2296,2303,2317,2324,2331,2338,2352,2359,2366,2373,2387,2394,2401,2408,2422,2429,2436,2443,2457,2464,2471,2478,2492,2499,2506,2513,2527,2534,2541,2548,2562,2569,2576,2583,2597,2604,2611,2618,2632,2639,2646,2653,2667,2674,2681,2688,2702,2709,2716,2723,2737,2744,2751,2758,2772,2779,2786,2793,2807,2814,2821,2828,2842,2849,2856,2863,2877,2884,2891,2898,2912,2919,2926,2933,2947,2954,2961,2968,2982,2989,2996,3003,3017,3024,3031,3038,3052,3059,3066,3073,3087,3094,3101,3108,3122,3129,3136,3143,3157,3164,3171,3178,3192,3199\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V4ndFsfDXZ9g",
        "colab_type": "text"
      },
      "source": [
        "Write a program which accepts a sequence of comma-separated numbers from console and\n",
        "generate a list.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FOjHbVBkXbKK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "85ba5fc0-2772-4c6e-f3f8-acbb00749561"
      },
      "source": [
        "X= input('Enter the Number differntaited by Commas').split(',')\n",
        "print(list(X))"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter the Number differntaited by Commas12,13,14\n",
            "['12', '13', '14']\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}